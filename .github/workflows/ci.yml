name: CI

on:
  push:
    branches:
      - 'master'
    tags:
      - 'v0.**'
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout application repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Finp2p-Contracts npm install
        working-directory: ./finp2p-contracts
        run: npm install

      - name: Finp2p-Contracts npm run compile
        working-directory: ./finp2p-contracts
        run: npm run compile

      - name: Finp2p-Contracts npm run test
        working-directory: ./finp2p-contracts
        run: npm run test

      - name: Adapter npm install
        run: npm install

      - name: Adapter npm run build
        run: npm run build

      - name: Adapter npm test
        run: npm test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set Docker tags
        run: |
          set -euxo pipefail
          case $GITHUB_EVENT_NAME in
            push)
              IMAGE_TAG=$GITHUB_REF_NAME
              ;;
            pull_request)
              IMAGE_TAG=$GITHUB_HEAD_REF
              ;;
            *)
              echo "ERROR: Unknown event"
              exit 1
              ;;
          esac
          export IMAGE_TAG=$(echo $IMAGE_TAG | sed 's/\//-/g' | sed 's/^v//')
          echo "PLATFORMS=linux/amd64" >> "$GITHUB_ENV"
          echo "IMAGE_TAG=$IMAGE_TAG" >> "$GITHUB_ENV"

      - name: Docker build local
        run: |
          ## local build for scanners
          docker build -t "ghcr.io/owneraio/finp2p-ethereum-adapter:${{ env.IMAGE_TAG }}" -f ./Dockerfile .
          docker build -t "ghcr.io/owneraio/hardhat:${{ env.IMAGE_TAG }}" -f ./Dockerfile-hardhat .
          cd ./finp2p-contracts
          docker build -t "ghcr.io/owneraio/finp2p-contracts:${{ env.IMAGE_TAG }}" -f ./Dockerfile-migration .
      

      - name: Trivy scan
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
      
          ## trivy scan on local images
          trivy image "ghcr.io/owneraio/finp2p-ethereum-adapter:${{ env.IMAGE_TAG }}"
          trivy image "ghcr.io/owneraio/hardhat:${{ env.IMAGE_TAG }}"
          trivy image "ghcr.io/owneraio/finp2p-contracts:${{ env.IMAGE_TAG }}"

      - name: Adapter Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          sbom: false
          provenance: false
          file: ./Dockerfile
          tags: |
            ownera/finp2p-ethereum-adapter:${{ env.IMAGE_TAG }}
            ghcr.io/owneraio/finp2p-ethereum-adapter:${{ env.IMAGE_TAG }}

      - name: Migration Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./finp2p-contracts
          push: true
          sbom: false
          provenance: false
          file: ./finp2p-contracts/Dockerfile-migration
          tags: |
            ownera/finp2p-contracts:${{ env.IMAGE_TAG }}
            ghcr.io/owneraio/finp2p-contracts:${{ env.IMAGE_TAG }}

      - name: Hardhat Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          sbom: false
          provenance: false
          file: ./Dockerfile-hardhat
          tags: |
            ownera/hardhat:${{ env.IMAGE_TAG }}
            ghcr.io/owneraio/hardhat:${{ env.IMAGE_TAG }}
