openapi: 3.0.1
info:
  title: Operational API
  description: This is the operational API reference for adapter development.
  termsOfService: 'https://ownera.io/terms/'
  contact:
    email: support@ownera.io
  version: x.x.x
tags:
  - name: ledger
    description: Sync operations between ledger adapter and finp2p node
  - name: execution
    description: Execution plan related operational APIs
  - name: custody
    description: Sync operations between custody adapter and finp2p node
  - name: operation
    description: sync long running operation results with the finp2p node

paths:
#  /operations/callback/{cid}:
#    post:
#      tags:
#        - operation
#      summary: callback operation
#      operationId: callback operation
#      parameters:
#        - in: header
#          name: Idempotency-Key
#          schema:
#            $ref: '#/components/schemas/nonce'
#        - name: cid
#          in: path
#          description: correlation id of operation
#          required: true
#          schema:
#            type: string
#      requestBody:
#        content:
#          application/json:
#            schema:
#              $ref: 'dlt-adapter-api.yaml#/components/schemas/operationStatus'
#      responses:
#        '200':
#          description: successful operation
#        '500':
#          description: System error
#          content: { }

  /ledger/transaction/import:
    post:
      tags:
        - ledger
      summary: Import external transactions
      parameters:
        - in: header
          name: Idempotency-Key
          schema:
            $ref: '#/components/schemas/nonce'
      description: Import transactions performed outside of FinP2P
      operationId: import transactions
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - transactions
              properties:
                transactions:
                  type: array
                  items:
                    $ref: '#/components/schemas/transaction'
      responses:
        '200':
          description: successful operation
        '208':
          description: |
            Some transactions were not imported due to duplicate transaction IDs.
        '404':
          description: Transaction not found
          content: { }
        '409':
          description: request with this idempotency key already in progress
          content: { }
        '422':
          description: Invalid idempotency key or request with same idempotency key but different payload
          content: { }
        '500':
          description: System error
          content: { }

  /execution/{planId}:
    get:
      tags:
        - execution
      summary: Get execution plan
      description: Get execution plan
      operationId: getExecutionPlan
      parameters:
        - name: planId
          in: path
          description: ID of the execution plan
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/execution'

        '404':
          description: Execution plan not found
          content: { }
        '500':
          description: System error
          content: { }

  /policies/{policyId}:
    get:
      tags:
        - policies
      summary: Get trading policy
      description: Get trading policy
      operationId: getPolicyById
      parameters:
        - name: policyId
          in: path
          description: ID of the trading policy
          required: true
          schema:
            type: string
      responses:
        '200':
          description: got the policy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tradingPolicy'

        '404':
          description: Trading policy not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiAnyError'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiAnyError'

  /policies/delete/{policyId}:
    delete:
      tags:
        - policies
      summary: Delete trading policy
      description: Delete trading policy
      operationId: deletePolicyById
      parameters:
        - name: policyId
          in: path
          description: ID of the trading policy
          required: true
          schema:
            type: string
      responses:
        '204':
          description: policy deleted
          content: {}
        '404':
          description: Trading policy not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiAnyError'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiAnyError'

  /policies:
    get:
      tags:
        - policies
      summary: Find trading policies
      description: Find trading policies
      operationId: findPolicies
      parameters:
        - name: assetMatchingType
          in: query
          description: asset matching type
          required: true
          schema:
            type: string
      responses:
        '200':
          description: found some policies
          content:
            application/json:
              schema:
                type: object
                required: [policies]
                properties:
                  policies:
                    type: array
                    items:
                      $ref: '#/components/schemas/tradingPolicy'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiAnyError'

  /assets/{assetId}/policies:
    get:
      tags:
        - policies
      summary: Get trading policies of the asset
      description: Get policies of the asset
      operationId: getAssetPoliciesByAssetId
      parameters:
        - name: assetId
          in: path
          description: ID of the asset
          required: true
          schema:
            type: string
      responses:
        '200':
          description: found some policies
          content:
            application/json:
              schema:
                type: object
                required: [ policies ]
                properties:
                  policies:
                    type: array
                    items:
                      $ref: '#/components/schemas/tradingPolicy'

        '404':
          description: Asset was not found
          content: { }
        '500':
          description: Internal error
          content: { }

  /policies/update:
    post:
      tags:
        - policies
      summary: Update a policy
      description: Update a policy
      operationId: updatePolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updatePolicyRequest'
      responses:
        '200':
          description: successful update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updatePolicyResponse'
        '400':
          description: Invalid Input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiAnyError'
        '404':
          description: Policy not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiAnyError'
        '409':
          description: constraints violation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiAnyError'
        '500':
          description: System error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiAnyError'

  /policies/create:
    post:
      tags:
        - policies
      summary: Create a policy
      description: Create a policy
      operationId: createPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createPolicyRequest'
      responses:
        '200':
          description: successful creation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createPolicyResponse'
        '400':
          description: Invalid Input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiAnyError'
        '409':
          description: policy with given policy id already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiAnyError'
        '500':
          description: System error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiAnyError'



components:
  schemas:
    asset:
      type: object
      discriminator:
        propertyName: type
        mapping:
          cryptocurrency: '#/components/schemas/cryptocurrencyAsset'
          fiat: '#/components/schemas/fiatAsset'
          finp2p: '#/components/schemas/finp2pAsset'
      oneOf:
        - $ref: '#/components/schemas/cryptocurrencyAsset'
        - $ref: '#/components/schemas/fiatAsset'
        - $ref: '#/components/schemas/finp2pAsset'

    cryptocurrencyAsset:
      type: object
      required:
        - type
        - code
      properties:
        type:
          type: "string"
          enum: [ "cryptocurrency" ]
        code:
          type: "string"
          description: 'unique identifier symbol of the cryptocurrency'

    fiatAsset:
      type: object
      required:
        - type
        - code
      properties:
        type:
          type: "string"
          enum: [ "fiat" ]
        code:
          type: "string"
          description: 'unique identifier code of the fiat currency - based on ISO-4217'

    finp2pAsset:
      type: object
      required:
        - type
        - resourceId
      properties:
        type:
          type: "string"
          enum: [ "finp2p" ]
        resourceId:
          $ref: '#/components/schemas/assetId'

    accountInformation:
      description: 'describes destination for remote operations'
      type: object
      required:
        - finId
        - account
      properties:
        finId:
          type: string
          description: FinID, public key of the user
        account:
          oneOf:
            - $ref: '#/components/schemas/finIdAccount'
            - $ref: '#/components/schemas/cryptoWalletAccount'
            - $ref: '#/components/schemas/fiatAccount'
          discriminator:
            propertyName: type
            mapping:
              finId: '#/components/schemas/finIdAccount'
              cryptoWallet: '#/components/schemas/cryptoWalletAccount'
              fiatAccount: '#/components/schemas/fiatAccount'

    finIdAccount:
      type: object
      required:
        - finId
        - type
      properties:
        type:
          type: string
          enum: [ "finId" ]
        finId:
          type: "string"
        orgId:
          type: "string"

    cryptoWalletAccount:
      type: object
      required:
        - type
        - address
      properties:
        type:
          type: string
          enum: [ "cryptoWallet" ]
        address:
          type: "string"
          description: 'address of the cryptocurrency wallet'

    fiatAccount:
      type: object
      required:
        - type
        - code
      properties:
        type:
          type: string
          enum: [ "fiatAccount" ]
        code:
          type: "string"
          description: 'IBAN or other code to represent a fiat account'

    transaction:
      type: object
      required: [ id, asset, quantity, timestamp, transactionDetails ]
      properties:
        id:
          type: string
          description: the receipt id
        asset:
          $ref: '#/components/schemas/asset'
        quantity:
          type: string
          description: quantity of the assets
        timestamp:
          type: integer
          format: int64
          description: transaction timestamp
        source:
          $ref: '#/components/schemas/accountInformation'
        destination:
          $ref: '#/components/schemas/accountInformation'
        transactionDetails:
          $ref: '#/components/schemas/transactionDetails'
        operationType:
          type: string
          enum: [ issue, transfer, hold, release, redeem ]
        proof:
          $ref: '#/components/schemas/proofPolicy'

    transactionDetails:
      description: Additional input and output details for UTXO supporting DLTs
      type: object
      required:
        - transactionId
      properties:
        operationId:
          type: string
        transactionId:
          type: string
          description: Transaction id
        trade:
          $ref: '#/components/schemas/trade'

    trade:
      type: object
      required:
        - executionPlanId
      properties:
        executionPlanId:
          $ref: '#/components/schemas/executionPlanId'
        sequence:
          type: integer
          format: uint32
          description: "Sequence number of the current instruction"

    execution:
      type: object
      required: [ plan, currentInstructionSequence, approvals, instructionsCompletionEvents, executionPlanStatus, creationTimestamp ]
      properties:
        plan:
          $ref: '#/components/schemas/executionPlan'
        approvals:
          type: array
          items:
            $ref: '#/components/schemas/executionPlanApproval'
          description: 'Approvals/signatures of participants'
        creationTimestamp:
          type: integer
          format: int64
          description: "creation time in seconds since unix epoch"
        instructionsCompletionEvents:
          type: array
          items:
            $ref: '#/components/schemas/instructionCompletionEvent'
          description: 'Represents a set of completed execution instructions'
        currentInstructionSequence:
          type: integer
          format: uint32
          description: 'Sequence number of the current instruction'
        executionPlanStatus:
          type: string
          enum: [ 'proposed', 'approved', 'rejected', 'failed', 'completed' ]
          description: 'Current status of the execution plan'

    executionPlan:
      type: object
      required: [ id, intent, instructions, participants ]
      properties:
        id:
          $ref: '#/components/schemas/executionPlanId'
        intent:
          $ref: '#/components/schemas/assetIntent'
        instructions:
          type: array
          items:
            $ref: '#/components/schemas/executionInstruction'
        participants:
          type: array
          items:
            $ref: '#/components/schemas/executionParticipant'

    executionInstruction:
      type: object
      required: [ sequence, organizations, executionPlanOperation ]
      properties:
        sequence:
          type: integer
          format: uint32
        organizations:
          type: array
          items:
            type: string
        executionPlanOperation:
          $ref: '#/components/schemas/executionPlanOperation'
        timeout:
          type: integer
          format: int32


    executionPlanOperation:
      oneOf:
        - $ref: '#/components/schemas/holdInstruction'
        - $ref: '#/components/schemas/releaseInstruction'
        - $ref: '#/components/schemas/issueInstruction'
        - $ref: '#/components/schemas/transferInstruction'
        - $ref: '#/components/schemas/awaitInstruction'
        - $ref: '#/components/schemas/revertHoldInstruction'
        - $ref: '#/components/schemas/redemptionInstruction'
      discriminator:
        propertyName: type
        mapping:
          hold: '#/components/schemas/holdInstruction'
          release: '#/components/schemas/releaseInstruction'
          issue: '#/components/schemas/issueInstruction'
          transfer: '#/components/schemas/transferInstruction'
          await: '#/components/schemas/awaitInstruction'
          redeem: '#/components/schemas/redemptionInstruction'

    holdInstruction:
      type: object
      required: [ type, source, destination, asset, amount, signature ]
      properties:
        type:
          type: string
          enum:
            [ "hold" ]
        source:
          $ref: '#/components/schemas/accountInformation'
        destination:
          $ref: '#/components/schemas/accountInformation'
        asset:
          $ref: '#/components/schemas/asset'
        amount:
          type: string
        signature:
          $ref: '#/components/schemas/signature'


    releaseInstruction:
      type: object
      required: [ type, source, destination, asset, amount ]
      properties:
        type:
          type: string
          enum:
            [ "release" ]
        asset:
          $ref: '#/components/schemas/asset'
        source:
          $ref: '#/components/schemas/accountInformation'
        destination:
          $ref: '#/components/schemas/accountInformation'
        amount:
          type: string

    issueInstruction:
      type: object
      required: [ asset, type, destination, amount, signature ]
      properties:
        type:
          type: string
          enum:
            [ "issue" ]
        asset:
          $ref: '#/components/schemas/asset'
        destination:
          $ref: '#/components/schemas/accountInformation'
        amount:
          type: string
        signature:
          $ref: '#/components/schemas/signature'

    transferInstruction:
      type: object
      required: [ asset, type, source, destination, amount, signature ]
      properties:
        type:
          type: string
          enum:
            [ "transfer" ]
        asset:
          $ref: '#/components/schemas/asset'
        source:
          $ref: '#/components/schemas/accountInformation'
        destination:
          $ref: '#/components/schemas/accountInformation'
        amount:
          type: string
        signature:
          $ref: '#/components/schemas/signature'

    awaitInstruction:
      type: object
      required: [ type, waitUntil ]
      properties:
        type:
          type: string
          enum:
            [ "await" ]
        waitUntil:
          type: integer
          format: uint64

    revertHoldInstruction:
      type: object
      required: [ type, destination, asset ]
      properties:
        type:
          type: string
          enum:
            [ "revert-hold" ]
        asset:
          $ref: '#/components/schemas/asset'
        source:
          $ref: '#/components/schemas/accountInformation'
        destination:
          $ref: '#/components/schemas/accountInformation'

    redemptionInstruction:
      type: object
      required: [ asset, type, source, destination, amount, signature ]
      properties:
        type:
          type: string
          enum:
            [ "redemption" ]
        asset:
          $ref: '#/components/schemas/asset'
        source:
          $ref: '#/components/schemas/accountInformation'
        destination:
          $ref: '#/components/schemas/accountInformation'
        amount:
          type: string
        signature:
          $ref: '#/components/schemas/signature'


    executionParticipant:
      type: object
      required: [ organizationId, roles ]
      properties:
        organizationId:
          type: string
        roles:
          type: array
          items:
            type: string
            enum:
              [ "contributor", "observer" ]

    executionPlanApproval:
      type: object
      required: [ organizationId, signature, digest ]
      properties:
        organizationId:
          type: string
          description: 'An Id of the organisation approved a plan'
    #        signature:
    #          $ref: '#/components/schemas/signature'

    instructionCompletionEvent:
      type: object
      required: [ instructionSequenceNumber, signature ]
      properties:
        instructionSequenceNumber:
          type: integer
          format: uint32
          description: 'Sequence number of the instruction involved'
        output:
          oneOf:
            - $ref: '#/components/schemas/receiptOutput'
            - $ref: '#/components/schemas/instructionCompletionError'
          discriminator:
            propertyName: type
            mapping:
              receipt: '#/components/schemas/receiptOutput'
              error: '#/components/schemas/instructionCompletionError'

    assetIntent:
      type: object
      required: [ start, end, intent ]
      properties:
        start:
          type: integer
          format: int64
          description: start time for intent, in epoch (seconds)
        end:
          type: integer
          format: int64
          description: end time for intent, in epoch (seconds)
        intent:
          $ref: '#/components/schemas/intent'

    intent:
      type: object
      oneOf:
        - $ref: '#/components/schemas/primarySale'
        - $ref: '#/components/schemas/buyingIntent'
        - $ref: '#/components/schemas/sellingIntent'
        - $ref: '#/components/schemas/loanIntent'
        - $ref: '#/components/schemas/redemptionIntent'
        - $ref: '#/components/schemas/privateOfferIntent'
        - $ref: '#/components/schemas/requestForTransferIntent'
      discriminator:
        propertyName: type
        mapping:
          primarySale: '#/components/schemas/primarySale'
          buyingIntent: '#/components/schemas/buyingIntent'
          sellingIntent: '#/components/schemas/sellingIntent'
          loanIntent: '#/components/schemas/loanIntent'
          redemptionIntent: '#/components/schemas/redemptionIntent'
          privateOfferIntent: '#/components/schemas/privateOfferIntent'
          requestForTransferIntent: '#/components/schemas/requestForTransferIntent'

    primarySale:
      type: object
      required: [ type, issuer , assetTerm, assetInstruction, settlementTerm ]
      properties:
        type:
          type: string
          enum: [ primarySale ]
        issuer:
          $ref: '#/components/schemas/ownerId'
        assetTerm:
          $ref: '#/components/schemas/finp2pAssetTerm'
        assetInstruction:
          $ref: '#/components/schemas/intentAssetInstruction'
        settlementTerm:
          $ref: '#/components/schemas/settlementTerm'
        settlementInstruction:
          $ref: '#/components/schemas/sellingIntentSettlementInstruction'

    buyingIntent:
      type: object
      required: [ type, buyer, assetTerm, assetInstruction, settlementTerm ]
      properties:
        type:
          type: string
          enum: [ buyingIntent ]
        buyer:
          type: string
          description: 'resource id of the buyer'
        assetTerm:
          $ref: '#/components/schemas/finp2pAssetTerm'
        assetInstruction:
          $ref: '#/components/schemas/intentAssetInstruction'
        settlementTerm:
          $ref: '#/components/schemas/settlementTerm'
        settlementInstruction:
          $ref: '#/components/schemas/buyingIntentSettlementInstruction'
        signaturePolicy:
          oneOf:
            - $ref: '#/components/schemas/presignedBuyIntentSignaturePolicy'
            - $ref: '#/components/schemas/manualSignaturePolicy'
          discriminator:
            propertyName: type
            mapping:
              presignedPolicy: '#/components/schemas/presignedBuyIntentSignaturePolicy'
              manualPolicy: '#/components/schemas/manualSignaturePolicy'

    sellingIntent:
      type: object
      required: [ type, seller, assetTerm, assetInstruction, settlementTerm ]
      properties:
        type:
          type: string
          enum: [ sellingIntent ]
        seller:
          $ref: '#/components/schemas/ownerId'
        assetTerm:
          $ref: '#/components/schemas/finp2pAssetTerm'
        assetInstruction:
          $ref: '#/components/schemas/intentAssetInstruction'
        settlementTerm:
          $ref: '#/components/schemas/settlementTerm'
        signaturePolicy:
          oneOf:
            - $ref: '#/components/schemas/presignedSellIntentSignaturePolicy'
            - $ref: '#/components/schemas/manualSignaturePolicy'
          discriminator:
            propertyName: type
            mapping:
              presignedPolicy: '#/components/schemas/presignedSellIntentSignaturePolicy'
              manualPolicy: '#/components/schemas/manualSignaturePolicy'
        settlementInstruction:
          $ref: '#/components/schemas/sellingIntentSettlementInstruction'

    privateOfferIntent:
      type: object
      required: [ type, buyer, seller, assetTerm, assetInstruction, settlementTerm ]
      properties:
        type:
          type: string
          enum: [ privateOfferIntent ]
        buyer:
          $ref: '#/components/schemas/ownerId'
        seller:
          $ref: '#/components/schemas/ownerId'
        assetTerm:
          $ref: '#/components/schemas/finp2pAssetTerm'
        assetInstruction:
          $ref: '#/components/schemas/intentAssetInstruction'
        settlementTerm:
          $ref: '#/components/schemas/settlementTerm'
        signaturePolicy:
          oneOf:
            - $ref: '#/components/schemas/presignedPrivateOfferIntentSignaturePolicy'
            - $ref: '#/components/schemas/manualSignaturePolicy'
          discriminator:
            propertyName: type
            mapping:
              presignedPolicy: '#/components/schemas/presignedPrivateOfferIntentSignaturePolicy'
              manualPolicy: '#/components/schemas/manualSignaturePolicy'
        settlementInstruction:
          $ref: '#/components/schemas/sellingIntentSettlementInstruction'

    requestForTransferIntent:
      type: object
      required: [ type, creditor, debitor, assetTerm, assetInstruction ]
      properties:
        type:
          type: string
          enum: [ requestForTransferIntent ]
        creditor:
          $ref: '#/components/schemas/ownerId'
        debitor:
          $ref: '#/components/schemas/ownerId'
        assetTerm:
          $ref: '#/components/schemas/finp2pAssetTerm'
        assetInstruction:
          $ref: '#/components/schemas/intentAssetInstruction'
        signaturePolicy:
          oneOf:
            - $ref: '#/components/schemas/manualSignaturePolicy'
          discriminator:
            propertyName: type
            mapping:
              manualPolicy: '#/components/schemas/manualSignaturePolicy'

    loanIntent:
      type: object
      required: [ type, assetTerm, assetInstruction, settlementTerm, creatorType, borrower, lender, interestRate, maturityDate ]
      properties:
        type:
          type: string
          enum: [ loanIntent ]
        creatorType:
          type: string
          enum: [ borrower, lender ]
        borrower:
          $ref: '#/components/schemas/ownerId'
        lender:
          $ref: '#/components/schemas/ownerId'
        assetTerm:
          $ref: '#/components/schemas/finp2pAssetTerm'
        assetInstruction:
          $ref: '#/components/schemas/loanIntentAssetInstruction'
        settlementTerm:
          $ref: '#/components/schemas/settlementTerm'
        settlementInstruction:
          $ref: '#/components/schemas/loanIntentSettlementInstruction'
        loanInstruction:
          $ref: '#/components/schemas/loanInstruction'
        signaturePolicy:
          oneOf:
            - $ref: '#/components/schemas/presignedLoanIntentSignaturePolicy'
          discriminator:
            propertyName: type
            mapping:
              presignedPolicy: '#/components/schemas/presignedLoanIntentSignaturePolicy'

    loanIntentAssetInstruction:
      type: object
      required: [ borrowerAccount, lenderAccount ]
      properties:
        borrowerAccount:
          $ref: '#/components/schemas/assetInstruction'
        lenderAccount:
          $ref: '#/components/schemas/assetInstruction'

    redemptionIntent:
      type: object
      required: [ type, issuer, assetTerm, assetInstruction, settlementTerm, settlementInstruction ]
      properties:
        type:
          type: string
          enum: [ redemptionIntent ]
        issuer:
          $ref: '#/components/schemas/ownerId'
        assetTerm:
          $ref: '#/components/schemas/finp2pAssetTerm'
        assetInstruction:
          $ref: '#/components/schemas/intentAssetInstruction'
        settlementTerm:
          $ref: '#/components/schemas/settlementTerm'
        settlementInstruction:
          $ref: '#/components/schemas/redemptionIntentSettlementInstruction'
        conditions:
          $ref: '#/components/schemas/redemptionIntentConditions'

    settlementTerm:
      type: object
      required: [ asset, unitValue ]
      properties:
        asset:
          $ref: '#/components/schemas/asset'
        unitValue:
          type: string
          description: 'A unit value represented as a string, the value is a decimal number'

    assetTerm:
      type: object
      required: [ asset, amount ]
      properties:
        asset:
          $ref: '#/components/schemas/asset'
        amount:
          type: string
          description: 'the total number of units'

    transferRequestAssetOrderInstruction:
      type: object
      required: [ sourceAccount, destinationAccount ]
      properties:
        sourceAccount:
          $ref: '#/components/schemas/assetInstruction'
        destinationAccount:
          $ref: '#/components/schemas/assetInstruction'

    transferRequestSettlement:
      type: object
      description: Settlement information for the issuance request
      required: [ term, instruction ]
      properties:
        term:
          $ref: '#/components/schemas/assetTerm'
        instruction:
          $ref: '#/components/schemas/transferRequestSettlementInstruction'

    transferRequestSettlementInstruction:
      type: object
      oneOf:
        - $ref: '#/components/schemas/escrowSettlement'
      discriminator:
        propertyName: type
        mapping:
          escrow: '#/components/schemas/escrowSettlement'

    finp2pAssetTerm:
      type: object
      required: [ asset, amount ]
      properties:
        asset:
          $ref: '#/components/schemas/finp2pAsset'
        amount:
          type: string
          description: 'the total number of units'

    intentAssetInstruction:
      type: object
      required: [ account ]
      properties:
        account:
          $ref: '#/components/schemas/assetInstruction'

    assetInstruction:
      type: object
      required: [ account, asset ]
      properties:
        account:
          $ref: '#/components/schemas/assetInstructionAccount'
        asset:
          $ref: '#/components/schemas/asset'

    assetInstructionAccount:
      type: object
      oneOf:
        - $ref: '#/components/schemas/finIdAccount'
      discriminator:
        propertyName: type
        mapping:
          finId: '#/components/schemas/finIdAccount'

    escrowSettlement:
      type: object
      required: [ type, sourceAccount, destinationAccount ]
      properties:
        type:
          type: string
          enum: [ "escrow" ]
        sourceAccount:
          $ref: '#/components/schemas/account'
        destinationAccount:
          $ref: '#/components/schemas/account'

    buyingIntentSettlementInstruction:
      type: object
      required: [ sourceAccount ]
      properties:
        sourceAccount:
          $ref: '#/components/schemas/account'


    sellingIntentSettlementInstruction:
      type: object
      required: [ destinationAccounts ]
      properties:
        destinationAccounts:
          type: array
          items:
            $ref: '#/components/schemas/account'

    loanIntentSettlementInstruction:
      type: object
      required: [ borrowerAccount, lenderAccount ]
      properties:
        borrowerAccount:
          $ref: '#/components/schemas/account'
        lenderAccount:
          $ref: '#/components/schemas/account'


    loanInstruction:
      type: object
      required: [ type, settlementInstruction, borrower, lender, openDate, closeDate, conditions ]
      properties:
        openDate:
          type: integer
          format: int64
          description: date and time operation starts, in epoch (seconds)
        closeDate:
          type: integer
          format: int64
          description: date and time operation ends, in epoch (seconds)
        conditions:
          $ref: '#/components/schemas/loanConditions'


    presignedSellIntentSignaturePolicy:
      type: object
      required: [ type ]
      properties:
        type:
          type: string
          enum:
            [ "presignedPolicy" ]

    presignedPrivateOfferIntentSignaturePolicy:
      type: object
      required: [ type ]
      properties:
        type:
          type: string
          enum:
            [ "presignedPolicy" ]

    presignedBuyIntentSignaturePolicy:
      type: object
      required: [ type, signature ]
      properties:
        type:
          type: string
          enum:
            [ "presignedPolicy" ]

    presignedLoanIntentSignaturePolicy:
      type: object
      required: [ type, nonce, signature ]
      properties:
        type:
          type: string
          enum:
            [ "presignedPolicy" ]

    manualSignaturePolicy:
      type: object
      required: [ type ]
      properties:
        type:
          type: string
          enum:
            [ "manualPolicy" ]

    loanConditions:
      type: object
      oneOf:
        - $ref: '#/components/schemas/repaymentTerm'
        - $ref: '#/components/schemas/interestRateTerm'
        - $ref: '#/components/schemas/closeAmountTerm'
      discriminator:
        propertyName: type
        mapping:
          repaymentTerm: '#/components/schemas/repaymentTerm'
          interestRateTerm: '#/components/schemas/interestRateTerm'
          closeAmountTerm: '#/components/schemas/closeAmountTerm'

    repaymentTerm:
      type: object
      required: [ type, closeAmount ]
      properties:
        type:
          type: string
          enum: [ repaymentTerm ]
        closeAmount:
          type: string
          description: amount of funds payable at maturity
        interestRate:
          type: string
          description: indicative annual interest rate of the operation

    interestRateTerm:
      type: object
      required: [ type, interestRate ]
      properties:
        type:
          type: string
          enum: [ interestRateTerm ]
        interestRate:
          type: string
          description: indicative annual interest rate of the operation

    closeAmountTerm:
      type: object
      required: [ type, closeAmount ]
      properties:
        type:
          type: string
          enum: [ closeAmountTerm ]
        closeAmount:
          type: string
          description: amount of funds payable at maturity

    nonce:
      type: string
      description: |
        32 bytes buffer (24 randomly generated bytes by the client + 8 bytes epoch timestamp seconds) encoded to hex:

          const nonce = Buffer.alloc(32);
          nonce.fill(crypto.randomBytes(24), 0, 24);

          const nowEpochSeconds = Math.floor(new Date().getTime() / 1000);
          const t = BigInt(nowEpochSeconds);
          nonce.writeBigInt64BE(t, 24);    

    signature:
      type: object
      required: [ signature, template, hashFunc ]
      description: 'represent a signature template information'
      properties:
        signature:
          type: string
          description: 'hex representation of the signature'
        template:
          $ref: '#/components/schemas/signatureTemplate'
        hashFunc:
          $ref: '#/components/schemas/hashFunction'

    signatureTemplate:
      type: object
      oneOf:
        - $ref: '#/components/schemas/hashListTemplate'
        - $ref: '#/components/schemas/EIP712Template'
      discriminator:
        propertyName: type
        mapping:
          hashList: '#/components/schemas/hashListTemplate'
          EIP712: '#/components/schemas/EIP712Template'

    hashListTemplate:
      description: 'ordered list of hash groups'
      required: [ type, hashGroups, hash ]
      type: object
      properties:
        type:
          type: string
          enum: [ "hashList" ]
        hashGroups:
          type: array
          items:
            $ref: '#/components/schemas/hashGroup'
        hash:
          type: string
          description: 'hex representation of the combined hash groups hash value'

    hashFunction:
      type: string
      enum:
        - unspecified
        - sha3_256
        - sha3-256
        - blake2b
        - keccak_256
        - keccak-256
      description: hash function types

    hashGroup:
      type: object
      required: [ hash, fields ]
      properties:
        hash:
          type: string
          description: 'hex representation of the hash group hash value'
        fields:
          description: 'list of fields by order they appear in the hash group'
          type: array
          items:
            $ref: '#/components/schemas/field'

    field:
      type: object
      description: 'describing a field in the hash group'
      required: [ name, type, value ]
      properties:
        name:
          type: string
          description: 'name of field'
        type:
          type: string
          enum: [ "string", "int", "bytes" ]
          description: 'type of field'
        value:
          type: string
          description: 'hex representation of the field value'

    EIP712Domain:
      type: object
      properties:
        name:
          type: string
        version:
          type: string
        chainId:
          type: integer
          format: uint64
        verifyingContract:
          type: string
          format: address
    EIP712TypedValue:
      oneOf:
        - $ref: '#/components/schemas/EIP712TypeString'
        - $ref: '#/components/schemas/EIP712TypeInteger'
        - $ref: '#/components/schemas/EIP712TypeBool'
        - $ref: '#/components/schemas/EIP712TypeByte'
        - $ref: '#/components/schemas/EIP712TypeObject'
        - $ref: '#/components/schemas/EIP712TypeArray'
    EIP712Types:
      type: object
      properties:
        definitions:
          type: array
          items:
            $ref: '#/components/schemas/EIP712TypeDefinition'
    EIP712TypeDefinition:
      type: object
      properties:
        name:
          type: string
        fields:
          type: array
          items:
            $ref: '#/components/schemas/EIP712FieldDefinition'
    EIP712FieldDefinition:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
    EIP712Template:
      required: [ type, domain, message, primaryType, types, hash ]
      type: object
      properties:
        type:
          type: string
          enum: [ "EIP712" ]
        domain:
          $ref: '#/components/schemas/EIP712Domain'
        message:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/EIP712TypedValue'
        types:
          $ref: '#/components/schemas/EIP712Types'
        primaryType:
          type: string
        hash:
          type: string
          description: 'hex representation of template hash'

    EIP712TypeString:
      type: string
      pattern: '^(?:$|0([^x].*)?|[^0].*)$' # matches string that doesn't start with hexadecimal prefix

    EIP712TypeByte:
      type: string
      pattern: '^0x[0-9a-fA-F]+$' # matches hexadecimal string starting with '0x'
      minLength: 3
      maxLength: 320

    EIP712TypeInteger:
      type: integer

    EIP712TypeBool:
      type: boolean

    EIP712TypeObject:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/EIP712TypedValue'

    EIP712TypeArray:
      type: array
      items:
        $ref: '#/components/schemas/EIP712TypedValue'

    receiptOutput:
      type: object
      required: [ type, id, asset, quantity, details, timestamp ]
      properties:
        type:
          type: string
          enum: [ "receipt" ]
        id:
          type: string
          description: receipt id
        asset:
          $ref: '#/components/schemas/receiptAsset'
        source:
          $ref: '#/components/schemas/ownerId'
        destination:
          $ref: '#/components/schemas/ownerId'
        quantity:
          type: string
        tradeDetails:
          $ref: '#/components/schemas/receiptTradeDetails'
        details:
          $ref: '#/components/schemas/receiptDetails'
        operationType:
          type: string
          enum: [ 'hold', 'issue', 'redeem', 'release', 'transfer', 'unknown' ]
        operationRef:
          type: string
        timestamp:
          type: integer
        proof:
          $ref: '#/components/schemas/proofPolicy'

    proofPolicy:
      type: object
      discriminator:
        propertyName: type
        mapping:
          signatureProofPolicy: '#/components/schemas/signatureProofPolicy'
          noProofPolicy: '#/components/schemas/noProofPolicy'
      oneOf:
        - $ref: '#/components/schemas/signatureProofPolicy'
        - $ref: '#/components/schemas/noProofPolicy'

    noProofPolicy:
      type: object
      required: [ type ]
      properties:
        type:
          type: string
          enum: [ "noProofPolicy" ]
      description: "no proof validation required for this policy"

    signatureProofPolicy:
      type: object
      required: [ type, signature ]
      properties:
        type:
          type: string
          enum: [ "signatureProofPolicy" ]
        signature:
          $ref: '#/components/schemas/signature'

    receiptAsset:
      type: object
      required: [ code, type ]
      properties:
        code:
          type: string
          description: asset code
        type:
          type: string
          description: asset type

    ownerId:
      type: string
      description: 'The Owner resource id'
      pattern: '^[^:](?:.+):101:(?:.+)'
      example: 'bank-x:101:511c1d7f-4ed8-410d-887c-a10e3e499a01'

    receiptTradeDetails:
      type: object
      properties:
        intentId:
          type: string
        intentVersion:
          type: string
        executionContext:
          $ref: '#/components/schemas/receiptExecutionContext'

    receiptExecutionContext:
      type: object
      required: [ executionPlanId, instructionSequenceNumber ]
      properties:
        executionPlanId:
          type: string
        instructionSequenceNumber:
          type: integer

    receiptDetails:
      type: object
      oneOf:
        - $ref: '#/components/schemas/receiptAssetDetails'
        - $ref: '#/components/schemas/receiptPaymentDetails'
      discriminator:
        propertyName: type
        mapping:
          asset: '#/components/schemas/receiptAssetDetails'
          payment: '#/components/schemas/receiptPaymentDetails'

    receiptAssetDetails:
      type: object
      required: [ type, transactionDetails ]
      properties:
        type:
          type: string
          enum: [ "asset" ]
        sourceFinId:
          type: string
        destinationFinId:
          type: string
        transactionDetails:
          $ref: '#/components/schemas/receiptTransactionDetails'

    receiptPaymentDetails:
      type: object
      required: [ type, transactionDetails ]
      properties:
        type:
          type: string
          enum: [ "payment" ]
        source:
          $ref: '#/components/schemas/account'
        destination:
          $ref: '#/components/schemas/account'
        transactionDetails:
          $ref: '#/components/schemas/receiptTransactionDetails'

    receiptTransactionDetails:
      description: Additional input and output details for UTXO supporting DLTs
      type: object
      required:
        - transactionId
      properties:
        transactionId:
          type: string
          description: Transaction id
        operationId:
          type: string
          description: Operation id

    account:
      type: object
      description: 'describes account information'
      required: [ account, asset ]
      properties:
        account:
          oneOf:
            - $ref: '#/components/schemas/finIdAccount'
            - $ref: '#/components/schemas/cryptoWalletAccount'
            - $ref: '#/components/schemas/fiatAccount'
          discriminator:
            propertyName: type
            mapping:
              finId: '#/components/schemas/finIdAccount'
              cryptoWallet: '#/components/schemas/cryptoWalletAccount'
              iban: '#/components/schemas/fiatAccount'
        asset:
          $ref: '#/components/schemas/asset'

    instructionCompletionError:
      type: object
      required: [ type, code, message ]
      properties:
        type:
          type: string
          enum: [ 'error' ]
        code:
          type: integer
          description: 1 for failure in regApps validation, 2 for failure in intent validation, 3 failure in settlement, 4 failure in signature verification
        message:
          type: string

    executionPlanId:
      type: string
      description: 'The execution plan  resource id'
      pattern: '^[^:](?:.+):106:(?:.+)'
      example: 'bank-x:106:511c1d7f-4ed8-410d-887c-a10e3e499a01'

    assetId:
      type: string
      description: 'The Asset resource id'
      pattern: '^[^:](?:.+):102:(?:.+)'
      example: 'bank-x:102:f461a964-ae08-4e35-b690-24de06d973db'

    intentId:
      type: string
      description: 'The intent resource id'
      pattern: '^[^:](?:.+):105:(?:.+)'
      example: 'bank-x:105:f461a964-ae08-4e35-b690-24de06d973db'

    redemptionIntentSettlementInstruction:
      type: object
      required: [ sourceAccounts ]
      properties:
        sourceAccounts:
          type: array
          items:
            $ref: '#/components/schemas/account'

    redemptionIntentConditions:
      properties:
        transferDue:
          type: integer
          format: int64
          description: date and time until transfer has to take place, in epoch (seconds)
          minimum: 0

    createPolicyResponse:
      type: object
      required: [ policyId ]
      properties:
        policyId:
          type: string
          maxLength: 50
          description: unique policy id

    updatePolicyResponse:
      type: object
      required: [ version ]
      properties:
        version:
          type: integer
          format: uint32
          description: the updated policy version

    tradingPolicy:
      type: object
      required: [ policyId, description, priority, isDefault, intent, instructions ]
      properties:
        policyId:
          type: string
          maxLength: 50
          description: unique policy id
        priority:
          type: integer
          format: uint32
          maximum: 1000000
          description: priority of the policy
        intent:
          $ref: '#/components/schemas/IntentType'
        description:
          type: string
          maxLength: 255
          description: "description of the policy"
        isDefault:
          type: boolean
          description: "whether policy should be applied to all assets"
        version:
          type: integer
          format: uint32
          description: "version of the trading policy"
        instructions:
          type: array
          items:
            $ref: '#/components/schemas/instruction'
        assetMatchingCriteria:
          $ref: '#/components/schemas/assetMatchingCriteria'
        constraints:
          $ref: '#/components/schemas/constraints'

    createPolicyRequest:
      type: object
      required: [ policyId, description, priority, intent, instructions ]
      properties:
        policyId:
          type: string
          maxLength: 50
          description: unique policy id
        priority:
          type: integer
          format: uint32
          maximum: 1000000
          description: priority of the policy
        intent:
          $ref: '#/components/schemas/IntentType'
        description:
          type: string
          maxLength: 255
          description: "description of the policy"
        isDefault:
          type: boolean
          description: "whether policy should be applied to all assets"
        instructions:
          type: array
          items:
            $ref: '#/components/schemas/instruction'
        assetMatchingCriteria:
          $ref: '#/components/schemas/assetMatchingCriteria'
        constraints:
          $ref: '#/components/schemas/constraints'

    updatePolicyRequest:
      type: object
      required: [ policyId, description, priority, intent, instructions, version, assetMatchingCriteria ]
      properties:
        policyId:
          type: string
          maxLength: 50
          description: unique policy id
        priority:
          type: integer
          format: uint32
          maximum: 1000000
          description: priority of the policy
        intent:
          type: string
          enum: [ 'primarySale', 'buyingIntent', 'sellingIntent', 'loanIntent', 'redemptionIntent', 'privateOfferIntent', 'requestForTransferIntent' ]
        description:
          type: string
          maxLength: 255
          description: "description of the policy"
        isDefault:
          type: boolean
          description: "whether policy should be applied to all assets"
        instructions:
          type: array
          items:
            $ref: '#/components/schemas/instruction'
        assetMatchingCriteria:
          $ref: '#/components/schemas/assetMatchingCriteria'
        constraints:
          $ref: '#/components/schemas/constraints'
        version:
          type: integer
          format: uint32
          description: "new version of the trading policy"

    constraints:
      type: object
      nullable: true
      properties:
        allowedCounterOrganizations:
          nullable: false
          type: array
          items:
            type: string
        allowedCounterAssetTypes:
          nullable: false
          type: array
          items:
            type: string

    assetMatchingCriteria:
      type: object
      nullable: true
      required: [assetTypes]
      properties:
        assetTypes:
          type: array
          items:
            type: string
            enum: ["finp2p", "fiat", "cryptocurrency", "custom"]
        assetNameRegexp:
          type: string
          nullable: true
          maxLength: 255
          minLength: 2
        assetCodes:
          nullable: false
          type: array
          items:
            type: string
            maxLength: 255
            minLength: 2

    instruction:
      type: object
      required: [ sequence, instruction, executors, onSuccess ]
      properties:
        instruction:
          type: string
          enum: ["Hold", "Transfer", "Release", "Await", "Issue", "RevertHold", "Redeem"]
        sequence:
          type: integer
          format: uint32
        executors:
          type: array
          items:
            type: string
            enum: ["self", "counterparty"]
        timeout:
          $ref: '#/components/schemas/tolerance'
        onFailure:
          $ref: '#/components/schemas/transition'
        onSuccess:
          $ref: '#/components/schemas/transition'
        onTimeout:
          $ref: '#/components/schemas/transition'
        details:
          discriminator:
            propertyName: type
            mapping:
              hold: '#/components/schemas/holdOperationDetails'
              transfer: '#/components/schemas/transferOperationDetails'
              issue: '#/components/schemas/issueOperationDetails'
              release: '#/components/schemas/releaseOperationDetails'
              await: '#/components/schemas/awaitOperationDetails'
              revertHold: '#/components/schemas/revertHoldOperationDetails'
          oneOf:
            - $ref: '#/components/schemas/holdOperationDetails'
            - $ref: '#/components/schemas/transferOperationDetails'
            - $ref: '#/components/schemas/issueOperationDetails'
            - $ref: '#/components/schemas/releaseOperationDetails'
            - $ref: '#/components/schemas/awaitOperationDetails'
            - $ref: '#/components/schemas/revertHoldOperationDetails'

    holdOperationDetails:
      type: object
      nullable: true
      required: [type, accountRole]
      properties:
        type:
          type: string
          enum: ["hold"]
        accountRole:
          type: string

    releaseOperationDetails:
      type: object
      nullable: true
      required: [ type ]
      properties:
        type:
          type: string
          enum: [ "release" ]
        holdInstructionSequence:
          type: integer
          format: uin32
        accountRole:
          type: string

    transferOperationDetails:
      type: object
      nullable: true
      required: [type, accountRole]
      properties:
        type:
          type: string
          enum: [ "transfer" ]
        accountRole:
          type: string

    issueOperationDetails:
      type: object
      nullable: true
      required: [ type ]
      properties:
        type:
          type: string
          enum: [ "issue" ]
        accountRole:
          type: string

    revertHoldOperationDetails:
      type: object
      nullable: true
      required: [ type ]
      properties:
        type:
          type: string
          enum: [ "revertHold" ]
        holdInstructionSequence:
          type: integer
          format: uin32

    awaitOperationDetails:
      type: object
      nullable: true
      required: [ type ]
      properties:
        type:
          type: string
          enum: [ "await" ]
        awaitTarget:
          type: string
          enum: ["close", "open"]

    IntentType:
      type: string
      enum: [ 'primarySale', 'buyingIntent', 'sellingIntent', 'loanIntent', 'redemptionIntent', 'privateOfferIntent' ]

    transition:
      type: object
      nullable: true
      discriminator:
        propertyName: type
        mapping:
          instruction: '#/components/schemas/instructionTransition'
          status: '#/components/schemas/statusTransition'
      oneOf:
        - $ref: '#/components/schemas/instructionTransition'
        - $ref: '#/components/schemas/statusTransition'

    statusTransition:
      type: object
      nullable: true
      required: [type, status]
      properties:
         type:
           type: string
           enum: ["status"]
         status:
           type: string
           enum: ["proposed", "approved", "rejected", "completed", "failed", "halted"]

    instructionTransition:
      type: object
      nullable: true
      required: [type, sequence]
      properties:
        type:
          type: string
          enum: [ "instruction" ]
        sequence:
          type: integer
          format: uint32

    tolerance:
      type: object
      nullable: true
      required: [value]
      properties:
        value:
          type: integer
          format: uint32
        options:
          $ref: '#/components/schemas/toleranceOptions'

    toleranceOptions:
      type: object
      properties:
        allowedValues:
          type: array
          nullable: false
          items:
            type: integer
            format: uint32
        percentageDeviation:
          type: integer
          format: uint32
        absoluteDeviation:
          type: integer
          format: uint32
      oneOf:
        - required: [absoluteDeviation]
        - required: [percentageDeviation]

    ApiAnyError:
      oneOf:
        - $ref: '#/components/schemas/ApiErrorClient4XX'
        - $ref: '#/components/schemas/ApiErrorServer5XX'


    ApiErrorClient4XX:
      type: object
      required: [ status, errors, type ]
      properties:
        type:
          type: string
          enum: [ "error" ]
        status:
          type: integer
          enum: [ 400, 401, 403, 404, 409 ]
          x-go-json-ignore: true
          x-enumNames: [ 'value' ]
        errors:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/AssetMetadataAndConfigError'
              - $ref: '#/components/schemas/GeneralClientError'

    ApiErrorServer5XX:
      type: object
      required: [ status, errors, type ]
      properties:
        type:
          type: string
          enum: [ "error" ]
        status:
          type: integer
          enum: [ 500, 502, 503, 504 ]
          x-go-json-ignore: true
          x-enumNames: [ 'value' ]
        errors:
          type: array
          items:
            $ref: '#/components/schemas/GeneralServerError'

    AssetMetadataAndConfigError:
      type: object
      required: [ code, message ]
      properties:
        code:
          type: integer
          enum: [ 4108 ]
        message:
          type: string
          enum: [ 'Asset metadata and config cannot be provided at the same time' ]

    # 10xx General Client Errors
    GeneralClientError:
      type: object
      required: [ code, message ]
      properties:
        code:
          type: integer
          enum: [ 1000 ]
        message:
          type: string
          enum: [ 'General client error' ]


    # 20xx General Server Errors
    GeneralServerError:
      type: object
      required: [ code, message ]
      properties:
        code:
          type: integer
          enum: [ 2000 ]
        message:
          type: string
          enum: [ 'General server error' ]